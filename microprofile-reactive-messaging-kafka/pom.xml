<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.jboss</groupId>
        <artifactId>jboss-parent</artifactId>
        <version>37</version>
    </parent>
    <groupId>org.wildfly.quickstarts</groupId>
    <artifactId>microprofile-reactive-messaging-kafka</artifactId>
    <version>25.0.0.Beta1-SNAPSHOT</version>
    <packaging>war</packaging>

    <name>Quickstart: microprofile-reactive-messaging-kafka</name>

    <properties>
        <!-- Test dependencies versions -->
        <version.io.rest-assured>4.3.1</version.io.rest-assured>
        <version.org.apache.kafka>2.8.0</version.org.apache.kafka>
        <version.org.jboss.jboss-dmr>1.5.1.Final</version.org.jboss.jboss-dmr>
        <version.org.springframework.kafka>2.7.3</version.org.springframework.kafka>
        <!-- Plugin versions -->
        <version.server.bootable-jar>25.0.0.Beta1-SNAPSHOT</version.server.bootable-jar>
        <version.wildfly-jar.maven.plugin>5.0.0.Final</version.wildfly-jar.maven.plugin>
        <version.jkube.maven.plugin>1.0.1</version.jkube.maven.plugin>
        <jkube.generator.from>registry.redhat.io/ubi8/openjdk-11:latest</jkube.generator.from>

        <root.dir>${project.basedir}</root.dir>
        <jboss.home.name>WILDFLY_HOME</jboss.home.name>
        <product.name>WildFly</product.name>
        <!-- A base list of dependency and plug-in version used in the various quick starts. -->
        <version.org.asciidoctor.asciidoctor-maven-plugin>2.1.0</version.org.asciidoctor.asciidoctor-maven-plugin>
        <version.wildfly.maven.plugin>2.0.2.Final</version.wildfly.maven.plugin>
        <version.org.wildfly.checkstyle-config>1.0.7.Final</version.org.wildfly.checkstyle-config>
        <version.org.wildfly.quickstarts.documentation.plugin>2.3.0.Final</version.org.wildfly.quickstarts.documentation.plugin>
        <!-- other plug-in versions -->
        <version.com.mycyla.license>3.0</version.com.mycyla.license>
        <version.checkstyle>8.5</version.checkstyle>
        <version.jaxws-tools-maven-plugin>1.2.3.Final</version.jaxws-tools-maven-plugin>
        <!-- Explicitly declaring the source encoding eliminates the following
            message: [WARNING] Using platform encoding (UTF-8 actually) to copy
            filtered resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Protocol to use for communication with remote maven repositories.
                     You can set to 'http' if you are using a maven proxy and 'https'
                     interferes with that. Use 'https' for builds that will be released
                     to non-snapshot public maven repos -->
        <maven.repository.protocol>https</maven.repository.protocol>
        <!-- The full remote maven repo URL; can be overridden via -D for special use cases -->
        <maven.repository.url>${maven.repository.protocol}://repository.jboss.org/nexus/content/groups/public/</maven.repository.url>
        <!-- https://access.redhat.com/maven-repository -->
        <maven.redhat.repository.url>${maven.repository.protocol}://maven.repository.redhat.com/ga/</maven.redhat.repository.url>

        <!-- Version of BOMs
        note: a SNAPSHOT version *requires* checkout of BOMs at https://github.com/wildfly/boms and build through "mvn clean install"
        -->
        <version.com.h2database>1.4.197</version.com.h2database>
        <version.junit>4.13.1</version.junit>
        <version.org.jboss.arquillian>1.6.0.Final</version.org.jboss.arquillian>
        <version.org.jboss.arquillian.extension>2.5.2</version.org.jboss.arquillian.extension>
        <version.org.jboss.arquillian.graphene>2.3.2</version.org.jboss.arquillian.graphene>
        <version.org.jboss.shrinkwrap.resolver>2.2.7</version.org.jboss.shrinkwrap.resolver>
        <version.org.testng>6.11</version.org.testng>
        <version.org.wildfly.arquillian>3.0.1.Final</version.org.wildfly.arquillian>
        <version.io.smallrye.reactive>3.8.0</version.io.smallrye.reactive>
        <version.jakarta.enterprise>2.0.2</version.jakarta.enterprise>
        <version.jakarta.inject>1.0.3</version.jakarta.inject>
        <version.jakarta.json>1.1.6</version.jakarta.json>
        <version.jakarta.json.bind>1.0.2</version.jakarta.json.bind>
        <version.org.apache.kafka>2.8.0</version.org.apache.kafka>
        <version.org.eclipse.microprofile.config>2.0</version.org.eclipse.microprofile.config>
        <version.org.eclipse.microprofile.fault-tolerance>3.0</version.org.eclipse.microprofile.fault-tolerance>
        <version.org.eclipse.microprofile.health>3.0</version.org.eclipse.microprofile.health>
        <version.org.eclipse.microprofile.jwt>1.2.1</version.org.eclipse.microprofile.jwt>
        <version.org.eclipse.microprofile.metrics>3.0</version.org.eclipse.microprofile.metrics>
        <version.org.eclipse.microprofile.openapi>2.0</version.org.eclipse.microprofile.openapi>
        <version.org.eclipse.microprofile.opentracing>2.0</version.org.eclipse.microprofile.opentracing>
        <version.org.eclipse.microprofile.reactive-streams-operators>2.0</version.org.eclipse.microprofile.reactive-streams-operators>
        <version.org.eclipse.microprofile.reactive.messaging>2.0</version.org.eclipse.microprofile.reactive.messaging>
        <version.org.eclipse.microprofile.rest.client>2.0</version.org.eclipse.microprofile.rest.client>
        <version.org.jboss.spec.javax.ws.rs>2.0.2.Final</version.org.jboss.spec.javax.ws.rs>

        <!-- Versions of unmanaged dependencies -->
        <version.arquillian.angularjs.graphene>1.2.0.Beta1</version.arquillian.angularjs.graphene>
        <version.com.nimbusds.jose.jwt>5.4</version.com.nimbusds.jose.jwt>
        <version.deltaspike.core>1.5.1</version.deltaspike.core>
        <version.org.apache.wicket>7.3.0</version.org.apache.wicket>
        <version.hibernate4>4.2.21.Final</version.hibernate4>
        <version.hibernate4.validator>4.3.2.Final</version.hibernate4.validator>
        <version.org.json>20150729</version.org.json>
        <version.org.richfaces>4.5.7.Final</version.org.richfaces>
        <version.ro.isdc.wro4j>1.7.9</version.ro.isdc.wro4j>

        <jboss.developer.drupal.url>http://rhdp-drupal.stage.redhat.com/</jboss.developer.drupal.url>
        <linkXRef>false</linkXRef>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.testng</groupId>
                <artifactId>testng</artifactId>
                <version>${version.org.testng}</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.shrinkwrap.resolver</groupId>
                <artifactId>shrinkwrap-resolver-bom</artifactId>
                <version>${version.org.jboss.shrinkwrap.resolver}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian.extension</groupId>
                <artifactId>arquillian-drone-bom</artifactId>
                <version>${version.org.jboss.arquillian.extension}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian.extension</groupId>
                <artifactId>arquillian-drone-webdriver-depchain</artifactId>
                <version>${version.org.jboss.arquillian.extension}</version>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian.graphene</groupId>
                <artifactId>graphene-webdriver</artifactId>
                <version>${version.org.jboss.arquillian.graphene}</version>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>com.h2database</groupId>
                <artifactId>h2</artifactId>
                <version>${version.com.h2database}</version>
            </dependency>
            <dependency>
                <groupId>org.wildfly.arquillian</groupId>
                <artifactId>wildfly-arquillian-common</artifactId>
                <version>${version.org.wildfly.arquillian}</version>
            </dependency>
            <dependency>
                <groupId>org.wildfly.arquillian</groupId>
                <artifactId>wildfly-arquillian-container-managed</artifactId>
                <version>${version.org.wildfly.arquillian}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${version.junit}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.wildfly.arquillian</groupId>
                <artifactId>wildfly-arquillian-container-remote</artifactId>
                <version>${version.org.wildfly.arquillian}</version>
            </dependency>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>${version.org.jboss.arquillian}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.smallrye.reactive</groupId>
                <artifactId>smallrye-reactive-messaging-kafka-api</artifactId>
                <version>${version.io.smallrye.reactive}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>*</artifactId>
                        <groupId>*</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>jakarta.enterprise</groupId>
                <artifactId>jakarta.enterprise.cdi-api</artifactId>
                <version>${version.jakarta.enterprise}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>jakarta.interceptor-api</artifactId>
                        <groupId>jakarta.interceptor</groupId>
                    </exclusion>
                    <exclusion>
                        <artifactId>jakarta.annotation-api</artifactId>
                        <groupId>jakarta.annotation</groupId>
                    </exclusion>
                    <exclusion>
                        <artifactId>jakarta.transaction-api</artifactId>
                        <groupId>jakarta.transaction</groupId>
                    </exclusion>
                    <exclusion>
                        <artifactId>jakarta.el-api</artifactId>
                        <groupId>jakarta.el</groupId>
                    </exclusion>
                    <exclusion>
                        <artifactId>javax.inject</artifactId>
                        <groupId>javax.inject</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>jakarta.inject</groupId>
                <artifactId>jakarta.inject-api</artifactId>
                <version>${version.jakarta.inject}</version>
            </dependency>
            <dependency>
                <groupId>jakarta.json.bind</groupId>
                <artifactId>jakarta.json.bind-api</artifactId>
                <version>${version.jakarta.json.bind}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>*</artifactId>
                        <groupId>*</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.kafka</groupId>
                <artifactId>kafka-clients</artifactId>
                <version>${version.org.apache.kafka}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>*</artifactId>
                        <groupId>*</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.config</groupId>
                <artifactId>microprofile-config-api</artifactId>
                <version>${version.org.eclipse.microprofile.config}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.fault-tolerance</groupId>
                <artifactId>microprofile-fault-tolerance-api</artifactId>
                <version>${version.org.eclipse.microprofile.fault-tolerance}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.health</groupId>
                <artifactId>microprofile-health-api</artifactId>
                <version>${version.org.eclipse.microprofile.health}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>javax.inject</artifactId>
                        <groupId>javax.inject</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.jwt</groupId>
                <artifactId>microprofile-jwt-auth-api</artifactId>
                <version>${version.org.eclipse.microprofile.jwt}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.metrics</groupId>
                <artifactId>microprofile-metrics-api</artifactId>
                <version>${version.org.eclipse.microprofile.metrics}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.openapi</groupId>
                <artifactId>microprofile-openapi-api</artifactId>
                <version>${version.org.eclipse.microprofile.openapi}</version>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.opentracing</groupId>
                <artifactId>microprofile-opentracing-api</artifactId>
                <version>${version.org.eclipse.microprofile.opentracing}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>*</artifactId>
                        <groupId>org.apache.geronimo.specs</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.rest.client</groupId>
                <artifactId>microprofile-rest-client-api</artifactId>
                <version>${version.org.eclipse.microprofile.rest.client}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>*</artifactId>
                        <groupId>*</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.reactive-streams-operators</groupId>
                <artifactId>microprofile-reactive-streams-operators-api</artifactId>
                <version>${version.org.eclipse.microprofile.reactive-streams-operators}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>*</artifactId>
                        <groupId>*</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.eclipse.microprofile.reactive.messaging</groupId>
                <artifactId>microprofile-reactive-messaging-api</artifactId>
                <version>${version.org.eclipse.microprofile.reactive.messaging}</version>
                <exclusions>
                    <exclusion>
                        <artifactId>*</artifactId>
                        <groupId>*</groupId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.jboss.spec.javax.ws.rs</groupId>
                <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>
                <version>${version.org.jboss.spec.javax.ws.rs}</version>
            </dependency>
            <dependency>
                <groupId>jakarta.json</groupId>
                <artifactId>jakarta.json-api</artifactId>
                <version>${version.jakarta.json}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    
    <dependencies>

        <!-- Import the CDI API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the Reactive Messaging API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.eclipse.microprofile.reactive.messaging</groupId>
            <artifactId>microprofile-reactive-messaging-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Import the Reactive Streams Operators API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.eclipse.microprofile.reactive-streams-operators</groupId>
            <artifactId>microprofile-reactive-streams-operators-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Import the Reactive Streams API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.reactivestreams</groupId>
            <artifactId>reactive-streams</artifactId>
            <version>1.0.3</version>
            <scope>provided</scope>
        </dependency>
        <!-- Import the Kafka Client API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Import the SmallRye Kafka API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>io.smallrye.reactive</groupId>
            <artifactId>smallrye-reactive-messaging-kafka-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Import the Persistence API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>2.2.3</version>
            <scope>provided</scope>
        </dependency>
        <!-- Import the Annotations API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.3_spec</artifactId>
            <version>2.0.1.Final</version>
            <scope>provided</scope>
        </dependency>
        <!-- Import the Persistence API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.transaction</groupId>
            <artifactId>jboss-transaction-api_1.3_spec</artifactId>
            <version>2.0.0.Final</version>
            <scope>provided</scope>
        </dependency>
        <!-- Import the JAX-RS API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.ws.rs</groupId>
            <artifactId>jboss-jaxrs-api_2.1_spec</artifactId>
            <version>2.0.2.Final</version>
            <scope>provided</scope>
        </dependency>
        <!-- Import the resteasy-jaxrs API, we use provided scope as the API is included in WildFly -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>resteasy-jaxrs</artifactId>
            <scope>provided</scope>
            <version>3.15.1.Final</version>
        </dependency>

        <!-- Test dependencies -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- MicroProfile Reactive Messaging Kafka Connector Test Dependencies -->
        <dependency>
            <groupId>org.springframework.kafka</groupId>
            <artifactId>spring-kafka-test</artifactId>
            <scope>test</scope>
            <version>${version.org.springframework.kafka}</version>
            <exclusions>
                <!--
                    This version pulls in a different version of Kafka from
                    our version of Kafka Clients
                -->
                <exclusion>
                    <groupId>org.apache.kafka</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <!--
            The org.springframework.kafka:spring-kafka-test dependency excludes all
             org.apache.kafka:* dependencies in the dependency management.
             Add them again here, so as not to pollute the parent pom with all these
             test dependencies
         -->
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-clients</artifactId>
            <classifier>test</classifier>
            <scope>test</scope>
            <version>${version.org.apache.kafka}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-streams</artifactId>
            <scope>test</scope>
            <version>${version.org.apache.kafka}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka-streams-test-utils</artifactId>
            <scope>test</scope>
            <version>${version.org.apache.kafka}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.13</artifactId>
            <scope>test</scope>
            <version>${version.org.apache.kafka}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.kafka</groupId>
            <artifactId>kafka_2.13</artifactId>
            <classifier>test</classifier>
            <scope>test</scope>
            <version>${version.org.apache.kafka}</version>
        </dependency>

        <!-- Other test dependencies -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
            <version>${version.io.rest-assured}</version>
        </dependency>
        <dependency>
            <groupId>org.wildfly.arquillian</groupId>
            <artifactId>wildfly-arquillian-common</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss</groupId>
            <artifactId>jboss-dmr</artifactId>
            <scope>test</scope>
            <version>${version.org.jboss.jboss-dmr}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.13</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.logging</groupId>
            <artifactId>commons-logging-jboss-logging</artifactId>
            <scope>test</scope>
            <version>1.0.0.Final</version>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <configuration>
                    <!-- adds versions properties as attributes for substitutions in README.adoc source blocks -->
                    <attributes>
                        <versionServerBom>${version.server.bom}</versionServerBom>
                        <versionMicroprofileBom>${version.microprofile.bom}</versionMicroprofileBom>
                    </attributes>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>bootable-jar</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-jar-maven-plugin</artifactId>
                        <version>${version.wildfly-jar.maven.plugin}</version>
                        <configuration>
                            <feature-pack-location>wildfly@maven(org.jboss.universe:community-universe)#${version.server.bootable-jar}</feature-pack-location>
                            <layers>
                                <layer>cloud-server</layer>
                                <layer>h2-default-datasource</layer>
                                <layer>microprofile-reactive-messaging-kafka</layer>
                            </layers>
                            <plugin-options>
                                <jboss-fork-embedded>true</jboss-fork-embedded>
                            </plugin-options>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>package</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>bootable-jar-openshift</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.wildfly.plugins</groupId>
                        <artifactId>wildfly-jar-maven-plugin</artifactId>
                        <version>${version.wildfly-jar.maven.plugin}</version>
                        <configuration>
                            <feature-pack-location>wildfly@maven(org.jboss.universe:community-universe)#${version.server.bootable-jar}</feature-pack-location>
                            <layers>
                                <layer>cloud-server</layer>
                                <layer>h2-default-datasource</layer>
                                <layer>microprofile-reactive-messaging-kafka</layer>
                            </layers>
                            <plugin-options>
                                <jboss-fork-embedded>true</jboss-fork-embedded>
                            </plugin-options>
                            <cloud/>
                        </configuration>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>package</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.eclipse.jkube</groupId>
                        <artifactId>openshift-maven-plugin</artifactId>
                        <version>${version.jkube.maven.plugin}</version>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>resource</goal>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <enricher>
                                <config>
                                    <jkube-service>
                                        <type>NodePort</type>
                                    </jkube-service>
                                </config>
                            </enricher>
                            <resources>
                                <env>
                                    <!--
                                        Set environment vars to adjust the JVM metaspace or we might end up
                                        with OutOfMemoryErrors on OpenShift
                                    -->
                                    <GC_MAX_METASPACE_SIZE>256</GC_MAX_METASPACE_SIZE>
                                    <GC_METASPACE_SIZE>96</GC_METASPACE_SIZE>
                                </env>
                            </resources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>os-jar-amq-streams</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.eclipse.jkube</groupId>
                        <artifactId>openshift-maven-plugin</artifactId>
                        <version>${version.jkube.maven.plugin}</version>
                        <configuration>
                            <resources>
                                <env>
                                    <!-- Set the AMQ Streams URL to what is set up by the instructions -->
                                    <MP_MESSAGING_CONNECTOR_SMALLRYE_KAFKA_BOOTSTRAP_SERVERS>my-cluster-kafka-bootstrap:9092</MP_MESSAGING_CONNECTOR_SMALLRYE_KAFKA_BOOTSTRAP_SERVERS>
                                </env>
                            </resources>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
